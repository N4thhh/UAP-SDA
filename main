import csv 

class ScholarshipApplication:
    def __init__(self, nama, umur, ipk, npm):
        self.nama = nama
        self.umur = umur
        self.ipk = ipk
        self.npm = npm
    def __repr__(self):
        return f"Nama: {self.nama}, Umur: {self.umur}, IPK: {self.ipk}, NPM: {self.npm}"

class ScholarshipManager:
    def __init__(self):
        self.applications = []

    def create_application(self, nama, umur, ipk, npm):
        application = ScholarshipApplication(nama, umur, ipk, npm)
        with open('Data/DataMahasiswa.csv', 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([application.nama, application.umur, application.ipk, application.npm])
            
        self.applications.append(application)
        

    def read_applications(self):
        if not self.applications:
            print("Tidak ada pendaftar.")
            return

        print("\nDaftar Pendaftar:")
        print("-" * 40)
        for app in self.applications:
            print("-" * 40)
            print(f"Name : {app.nama}")
            print(f"Age  : {app.umur}")
            print(f"ipk  : {app.ipk:.2f}")
            print(f"NPM  : {app.npm}")
            print("-"*40)
        print("-" * 40)

    def csvUpdate(self):
        with open('Data/DataMahasiswa.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['nama','umur','ipk','npm'])
            for app in self.applications:
                writer.writerow([app.nama, app.umur, app.ipk, app.npm])
                    
    def update_application(self, npm, new_nama=None, new_umur=None, new_ipk=None, new_npm=None):
        found = False
        for app in self.applications:
            if app.npm == npm:
                if new_nama:
                    app.nama = new_nama
                if new_umur:
                    app.umur = new_umur
                if new_ipk:
                    app.ipk = new_ipk
                if new_npm:
                    if new_npm == app.npm:
                        print("NPM tidak diperbaharui.")
                    else:
                        app.npm = new_npm
                found = True
                self.csvUpdate()
                print(f"Pendaftaran untuk {npm} telah diperbaharui.")
                break
        if not found:
            print(f"Tidak ada pendaftaran untuk {npm}.")

    def delete_application(self, nama):
        initial_len = len(self.applications)
        self.applications = [app for app in self.applications if app.nama != nama]
        if len(self.applications) < initial_len:
            print(f"Pendaftaran atas nama {nama} dihapus.")
            self.csvUpdate()
        else:
            print(f"Tidak ada pendaftaran atas nama {nama}.")

    def search_application(self, nama):
        for app in self.applications:
            if app.nama == nama:
                print("Nama ditemukan :")
                print(app)
                return
        print(f"Nama {nama} tidak ditemukan di database.")

    def sort_applications_by_ipk(self):
        self.applications.sort(key=lambda x: x.ipk, reverse=True)
        print("Pendaftaran telah diurutkan berdasarkan IPK")

    def sort_appplications_by_npm(self):
        self.applications.sort(key=lambda x: x.npm)
        print("Pendaftaran telah diurutkan berdasarkan NPM")
    
    def sort_appplications_by_age(self):
        self.applications.sort(key=lambda x: x.umur)
        
    def sort_appplications_by_name(self):
        self.applications.sort(key=lambda x: x.nama)
        
    def laodData(self):
        with open('./Data/DataMahasiswa.csv','r') as csvfile:
            reader = csv.DictReader(csvfile)
            data = list(reader)
            for row in data:
                application = ScholarshipApplication(row['nama'], int(row['umur']), float(row['ipk']), int(row['npm']))
                self.applications.append(application)

def main():
    manager = ScholarshipManager()
    manager.laodData()
    while True:
        print("__        _______ _     ____ ___  __  __ _____")
        print("\\ \\      / / ____| |   / ___/ _ \\|  \\/  | ____|")
        print(" \\ \\ /\\ / /|  _| | |  | |  | | | | |\\/| |  _|")  
        print("  \\ V  V / | |___| |__| |__| |_| | |  | | |___")
        print("   \\_/\\_/  |_____|_____\\____\\___/|_|  |_|_____|")
        applyYN = input("Anda ingin mendaftar (Y/N)? : ")
        if applyYN.lower() == 'y':
            apply = True
            break
        elif applyYN.lower() == 'n':
            apply = False
            print(" _____ _   _    _    _   _ _  __ __   _____  _   _ ")
            print("|_   _| | | |  / \\  | \\ | | |/ / \\ \\ / / _ \\| | | |")
            print("  | | | |_| | / _ \\ |  \\| | ' /   \\ V / | | | | | |")
            print("  | | |  _  |/ ___ \\| |\\  | . \\    | || |_| | |_| |")
            print("  |_| |_| |_/_/   \\_\\_| \\_|_|\\_\\   |_| \\___/ \\___/ ")
            return
        else:
            print("Pilihan Invalid, tolong coba lagi.")

    while apply:
        print("\nSistem Manajemen Pendaftaran Beasiswa")
        print("1. Daftar Beasiswa")
        print("2. List Pendaftar")
        print("3. Update Data Pendaftar")
        print("4. Hapus Data Pendaftar")
        print("5. Cari Pendaftar")
        print("6. Urutkan Pendaftar")
        print("7. Exit")
        choice = input("Pilihan anda: ")

        if choice == '1':
            nama = input("Nama: ")
            while True:
                umur = int(input("Umur: "))
                if 18 <= umur <= 20:
                    break
                print("Hanya menerima pendaftar berumur 18-20 tahun.")

            while True:
                ipk = float(input("IPK: "))
                if 3 <= ipk <= 4:
                    break
                elif ipk < 3:
                    print("Minimal IPK 3.00")
                else:
                    print("IPK Invalid!")

            manager.create_application(nama, umur, ipk)
        elif choice == '2':
            manager.read_applications()
        elif choice == '3':
            npm = int(input("npm Pendaftar: "))
            new_nama = input("Nama Baru (kosongkan jika tidak ada yang baru): ")
            new_umur = input("Umur Baru (kosongkan jika tidak ada yang baru): ")
            new_ipk  = input("IPK Baru  (kosongkan jika tidak ada yang baru): ")
            new_npm = input("NPM Baru (kosongkan jika tidak ada yang baru): ")
            manager.update_application(npm, new_nama or None, int(new_umur) if new_umur else None, float(new_ipk) if new_ipk else None, int(new_npm) if new_npm else None)
        elif choice == '4':
            nama = input("Nama Pendaftar yang ingin dihapus: ")
            manager.delete_application(nama)
        elif choice == '5':
            nama = input("Nama Pendaftar yang ingin dicari: ")
            manager.search_application(nama)
        elif choice == '6':
            print('Berdasarkan Apa anda ingin mengurutkan?')
            print('1. Nama')
            print('2. Umur')
            print('3. IPK')
            print('4. NPM')
            print('5. Exit')
            choice = int(input("Pilihan anda: "))
            method = [manager.sort_appplications_by_name, manager.sort_appplications_by_age, manager.sort_applications_by_ipk, manager.sort_appplications_by_npm]
            if choice < 5 and choice > 0:
                method[choice - 1]()
            elif choice == 5:
                break
        elif choice == '7':
            print(" _____ _   _    _    _   _ _  __ __   _____  _   _ ")
            print("|_   _| | | |  / \\  | \\ | | |/ / \\ \\ / / _ \\| | | |")
            print("  | | | |_| | / _ \\ |  \\| | ' /   \\ V / | | | | | |")
            print("  | | |  _  |/ ___ \\| |\\  | . \\    | || |_| | |_| |")
            print("  |_| |_| |_/_/   \\_\\_| \\_|_|\\_\\   |_| \\___/ \\___/ ")
            break
        else:
            print("Pilihan Invalid, tolong coba lagi.")
main()
