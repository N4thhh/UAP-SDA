import tkinter as tk
from tkinter import messagebox

class ScholarshipApplication:
    def __init__(self, nama, umur, ipk):
        self.nama = nama
        self.umur = umur
        self.ipk = ipk

    def __repr__(self):
        return f"Nama: {self.nama}, Umur: {self.umur}, IPK: {self.ipk}"

class ScholarshipManager:
    def __init__(self):
        self.applications = []

    def create_application(self, nama, umur, ipk):
        if not nama:
            messagebox.showerror("Error", "Kolom Nama harus diisi.")
            return

        if any(app.nama == nama for app in self.applications):
            messagebox.showerror("Error", f"Pendaftar dengan nama {nama} sudah ada.")
            return

        application = ScholarshipApplication(nama, umur, ipk)
        self.applications.append(application)
        messagebox.showinfo("Success", f"Pendaftaran untuk {nama} telah ditambahkan.")

    def read_applications(self):
        if not self.applications:
            messagebox.showinfo("Info", "Tidak ada pendaftar.")
            return []

        return self.applications

    def update_application(self, nama, new_nama=None, new_umur=None, new_ipk=None):
        found = False
        for app in self.applications:
            if app.nama == nama:
                if new_nama:
                    if any(a.nama == new_nama for a in self.applications):
                        messagebox.showerror("Error", f"Pendaftaran untuk {new_nama} sudah ada.")
                        return
                    app.nama = new_nama
                if new_umur:
                    app.umur = new_umur
                if new_ipk:
                    app.ipk = new_ipk
                found = True
                messagebox.showinfo("Success", f"Pendaftaran untuk {nama} telah diperbaharui.")
                break
        if not found:
            messagebox.showerror("Error", f"Tidak ada pendaftaran untuk {nama}.")

    def delete_application(self, nama):
        initial_len = len(self.applications)
        self.applications = [app for app in self.applications if app.nama != nama]
        if len(self.applications) < initial_len:
            messagebox.showinfo("Success", f"Pendaftaran atas nama {nama} dihapus.")
        else:
            messagebox.showerror("Error", f"Tidak ada pendaftaran atas nama {nama}.")

    def search_application(self, nama):
        for app in self.applications:
            if app.nama == nama:
                messagebox.showinfo("Nama ditemukan", str(app))
                return
        messagebox.showerror("Error", f"Nama {nama} tidak ditemukan di database.")

    def sort_applications_by_ipk(self):
        self.applications.sort(key=lambda x: x.ipk, reverse=True)
        messagebox.showinfo("Success", "Pendaftaran telah diurutkan berdasarkan IPK")

class ScholarshipApp:
    def __init__(self, root):
        self.manager = ScholarshipManager()
        self.root = root
        self.root.title("Sistem Pendaftaran Beasiswa")
        self.root.geometry("400x300")
        self.button_width = 20
        self.entry_width = 40 
        self.show_initial_screen()

    def show_initial_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label = tk.Label(self.root, text="Apakah anda ingin mendaftar?", font=("Helvetica", 16))
        label.pack(pady=20)

        btn_apply = tk.Button(self.root, text="Ya", width=self.button_width, command=self.show_main_menu)
        btn_apply.pack(side=tk.LEFT, padx=20, pady=20)

        btn_exit = tk.Button(self.root, text="Tidak", width=self.button_width, command=self.root.quit)
        btn_exit.pack(side=tk.RIGHT, padx=20, pady=20)

    def show_main_menu(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        btn_apply = tk.Button(self.root, text="Daftar", width=self.button_width, command=self.show_application_form)
        btn_apply.pack(side=tk.TOP, pady=10)

        btn_list = tk.Button(self.root, text="List Pendaftar", width=self.button_width, command=self.show_applicant_list)
        btn_list.pack(side=tk.TOP, pady=10)

        btn_exit = tk.Button(self.root, text="Keluar", width=self.button_width, command=self.root.quit)
        btn_exit.pack(side=tk.TOP, pady=10)

    def show_application_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="Nama")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        label_age = tk.Label(self.root, text="Umur")
        label_age.pack(pady=5)
        self.entry_age = tk.Entry(self.root, width=self.entry_width)
        self.entry_age.pack(pady=5)

        label_gpa = tk.Label(self.root, text="IPK")
        label_gpa.pack(pady=5)
        self.entry_gpa = tk.Entry(self.root, width=self.entry_width)
        self.entry_gpa.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_application)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_main_menu)
        btn_back.pack(pady=5)

    def submit_application(self):
        name = self.entry_name.get()
        if not name:
            messagebox.showerror("Error", "Kolom Nama harus diisi.")
            return

        try:
            age = int(self.entry_age.get())
        except ValueError:
            messagebox.showerror("Error", "Umur harus berupa angka.")
            return
        try:
            gpa = float(self.entry_gpa.get())
        except ValueError:
            messagebox.showerror("Error", "IPK harus berupa angka.")
            return

        if age < 18 or age > 20:
            messagebox.showerror("Error", "Hanya menerima pendaftar berumur 18-20 tahun.")
            return

        if gpa < 3.0:
            messagebox.showerror("Error", "Minimal IPK 3.00")
            return

        if gpa > 4.0:
            messagebox.showerror("Error", "IPK Invalid!")
            return

        self.manager.create_application(name, age, gpa)
        self.show_main_menu()

    def show_applicant_list(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        applicants = self.manager.read_applications()
        if applicants:
            for app in applicants:
                tk.Label(self.root, text=str(app)).pack()

        btn_update = tk.Button(self.root, text="Perbarui", width=self.button_width, command=self.show_update_form)
        btn_update.pack(side=tk.TOP, pady=5)

        btn_delete = tk.Button(self.root, text="Hapus", width=self.button_width, command=self.show_delete_form)
        btn_delete.pack(side=tk.TOP, pady=5)

        btn_search = tk.Button(self.root, text="Cari", width=self.button_width, command=self.show_search_form)
        btn_search.pack(side=tk.TOP, pady=5)

        btn_sort = tk.Button(self.root, text="Urutkan berdasarkan IPK", width=self.button_width, command=self.sort_applications)
        btn_sort.pack(side=tk.TOP, pady=5)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_main_menu)
        btn_back.pack(side=tk.TOP, pady=20)

    def show_update_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="Nama untuk Diperbarui")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        label_new_name = tk.Label(self.root, text="Nama Baru (opsional)")
        label_new_name.pack(pady=5)
        self.entry_new_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_name.pack(pady=5)

        label_new_age = tk.Label(self.root, text="Umur Baru (opsional)")
        label_new_age.pack(pady=5)
        self.entry_new_age = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_age.pack(pady=5)

        label_new_gpa = tk.Label(self.root, text="IPK Baru (opsional)")
        label_new_gpa.pack(pady=5)
        self.entry_new_gpa = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_gpa.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_update)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_update(self):
        name = self.entry_name.get()
        new_name = self.entry_new_name.get() or None
        new_age = int(self.entry_new_age.get()) if self.entry_new_age.get() else None
        new_gpa = float(self.entry_new_gpa.get()) if self.entry_new_gpa.get() else None

        self.manager.update_application(name, new_name, new_age, new_gpa)
        self.show_applicant_list()

    def show_delete_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="Nama untuk Dihapus")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_delete)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_delete(self):
        name = self.entry_name.get()
        self.manager.delete_application(name)
        self.show_applicant_list()

    def show_search_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="Nama untuk Dicari")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_search)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_search(self):
        name = self.entry_name.get()
        self.manager.search_application(name)
        self.show_applicant_list()

    def sort_applications(self):
        self.manager.sort_applications_by_ipk()
        self.show_applicant_list()

if __name__ == "__main__":
    root = tk.Tk()
    app = ScholarshipApp(root)
    root.mainloop()
