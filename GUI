from tkinter import *
import tkinter as tk
from tkinter import messagebox
import csv

# Class untuk aplikasi / daftar
class ScholarshipApplication:
    def __init__(self, nama, umur, ipk, npm):
        self.nama = nama
        self.umur = umur
        self.ipk = ipk
        self.npm = npm
    def __repr__(self):
        return f"Nama: {self.nama}, Umur: {self.umur}, IPK: {self.ipk}, NPM: {self.npm}"

# Class untuk manajemen data pendaftaran
class ScholarshipManager:
    def __init__(self):
        self.applications = []

    def create_application(self, nama, umur, ipk, npm):
        application = ScholarshipApplication(nama, umur, ipk, npm)
        with open('Data/DataMahasiswa.csv', 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([application.nama, application.umur, application.ipk, application.npm])
            
        self.applications.append(application)
        

    def read_applications(self):
        if not self.applications:
            messagebox.showinfo("Info", "Tidak ada pendaftar.")
            return []

        return self.applications

    def csvUpdate(self):
        with open('Data/DataMahasiswa.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['nama','umur','ipk','npm'])
            for app in self.applications:
                writer.writerow([app.nama, app.umur, app.ipk, app.npm])
                    
    def update_application(self, npm, new_nama=None, new_umur=None, new_ipk=None, new_npm=None):
        found = False
        for app in self.applications:
            if app.npm == npm:
                if new_npm:
                    if any(a.npm == new_npm for a in self.applications):
                        messagebox.showerror("Error", f"Pendaftaran untuk {new_npm} sudah ada.")
                        return
                    app.npm = new_npm
                if new_nama:
                    app.nama = new_nama    
                if new_umur:
                    app.umur = new_umur
                if new_ipk:
                    app.ipk = new_ipk
                found = True
                messagebox.showinfo("Success", f"Pendaftaran untuk {npm} telah diperbaharui.")
                break
        if not found:
            messagebox.showerror("Error", f"Tidak ada pendaftaran untuk {npm}.")
        self.csvUpdate()
        
    def delete_application(self, npm):
        initial_len = len(self.applications)
        self.applications = [app for app in self.applications if app.npm != npm]
        if len(self.applications) < initial_len:
            messagebox.showinfo("Success", f"Pendaftaran atas npm {npm} dihapus.")
        else:
            messagebox.showerror("Error", f"Tidak ada pendaftaran atas npm {npm}.")
        self.csvUpdate()

    def search_application(self, npm):
        for app in self.applications:
            if app.npm == npm:
                messagebox.showinfo("Nama ditemukan", str(app))
                return
        messagebox.showerror("Error", f"Nama {npm} tidak ditemukan di database.")

    def sort_applications_by_ipk(self):
        self.applications.sort(key=lambda x: x.ipk, reverse=True)
        print("Pendaftaran telah diurutkan berdasarkan IPK")

    def sort_applications_by_npm(self):
        self.applications.sort(key=lambda x: x.npm)
        print("Pendaftaran telah diurutkan berdasarkan NPM")
    
    def sort_applications_by_age(self):
        self.applications.sort(key=lambda x: x.umur)
        
    def sort_applications_by_name(self):
        self.applications.sort(key=lambda x: x.nama)
        
    def laodData(self):
        with open('./Data/DataMahasiswa.csv','r') as csvfile:
            reader = csv.DictReader(csvfile)
            data = list(reader)
            for row in data:
                application = ScholarshipApplication(row['nama'], int(row['umur']), float(row['ipk']), int(row['npm']))
                self.applications.append(application)

#Class untuk tkinter atau GUI nya
class ScholarshipApp:
    def __init__(self, root):
        self.manager = ScholarshipManager()
        self.manager.laodData()
        self.root = root
        self.root.title("Sistem Informasi Beasiswa")
        self.xmax = self.root.winfo_screenwidth()
        self.ymax = self.root.winfo_screenheight() 
        self.root.geometry("600x400")
        self.button_width = 20
        self.entry_width = 40 
        self.show_main_menu()

    def show_main_menu(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        btn_apply = tk.Button(self.root, text="Daftar", width=self.button_width, command=self.show_application_form)
        btn_apply.pack(side=tk.TOP, pady=10)

        btn_list = tk.Button(self.root, text="List Pendaftar", width=self.button_width, command=self.show_applicant_list)
        btn_list.pack(side=tk.TOP, pady=10)

        btn_exit = tk.Button(self.root, text="Keluar", width=self.button_width, command=self.root.quit)
        btn_exit.pack(side=tk.TOP, pady=10)

    def show_application_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="Nama")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)
        
        label_age = tk.Label(self.root, text="Umur")
        label_age.pack(pady=5)
        self.entry_age = tk.Entry(self.root, width=self.entry_width)
        self.entry_age.pack(pady=5)

        label_ipk = tk.Label(self.root, text="IPK")
        label_ipk.pack(pady=5)
        self.entry_ipk = tk.Entry(self.root, width=self.entry_width)
        self.entry_ipk.pack(pady=5)

        label_npm = tk.Label(self.root, text="NPM")
        label_npm.pack(pady=5)
        self.entry_npm = tk.Entry(self.root, width=self.entry_width)
        self.entry_npm.pack(pady=5)
        
        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_application)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_main_menu)
        btn_back.pack(pady=5)

    def submit_application(self):
        name = self.entry_name.get()
        if not name:
            messagebox.showerror("Error", "Kolom Nama harus diisi.")
            return
        try:
            age = int(self.entry_age.get())
        except ValueError:
            messagebox.showerror("Error", "Umur harus berupa angka.")
            return
        try:
            ipk = float(self.entry_ipk.get())
        except ValueError:
            messagebox.showerror("Error", "IPK harus berupa angka.")
            return
        npm = int(self.entry_npm.get())
        if not npm :
            messagebox.showerror("Error", "Kolom NPM harus diisi.")
            return
        
        if age < 18 or age > 20:
            messagebox.showerror("Error", "Hanya menerima pendaftar berumur 18-20 tahun.")
            return

        if ipk < 3.0:
            messagebox.showerror("Error", "Minimal IPK 3.00")
            return

        if ipk > 4.0:
            messagebox.showerror("Error", "IPK Invalid!")
            return

        self.manager.create_application(name, age, ipk, npm)
        self.show_main_menu()

    def close_second_window(self):
        self.second_window.destroy()
    
    def update_name_label(self):
        for widget in self.second_window.winfo_children():
            widget.destroy()
            
        start_index = self.current_page * self.names_per_page
        end_index = min((self.current_page + 1) * self.names_per_page, len(self.names))
        
        for app in self.applicants[start_index:end_index]:
            label = tk.Label(self.second_window, text=str(app), background="#373535", foreground="white")
            label.pack(side=tk.TOP)
        
        my_frame = tk.Frame(self.second_window)
        my_frame.pack(side=tk.TOP)
        
        self.back_button = tk.Button(my_frame, text="Back", state="disabled", command=self.go_back, width=5)
        self.back_button.pack(side=tk.LEFT)

        self.search_entry = tk.Entry(my_frame, width=5)
        self.search_entry.pack(side=tk.LEFT)
        
        self.forward_button = tk.Button(my_frame, text="Forward", command=self.go_forward, width=5)
        self.forward_button.pack(side=tk.LEFT)

        self.search_button = tk.Button(self.second_window, text="Search", command=lambda : self.go_to_page(int(self.search_entry.get())),width=5)
        self.search_button.pack(side=tk.TOP)
        
        close_button = tk.Button(self.second_window, text="Close", command=self.close_second_window, width=5)
        close_button.pack(side=tk.TOP)
        
        self.update_button_states()

    def update_button_states(self):
        self.back_button.config(state="disabled" if self.current_page == 0 else "normal")
        self.forward_button.config(state="normal" if len(self.names) > (self.current_page + 1) * self.names_per_page else "disabled")

    def go_back(self):
        self.current_page -= 1
        self.update_name_label()

    def go_forward(self):
        self.current_page += 1
        self.update_name_label()
        
    def go_to_page(self, page):
        self.current_page = page
        if self.current_page * self.names_per_page <= len(self.names):
            self.update_name_label()
        else :
            messagebox.showerror("Error", "Halaman tidak ditemukan.")
            return

    def show_applicant_list(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        self.names = self.manager.read_applications()
        self.current_page = 0
        self.names_per_page = 5
        
        self.applicants = self.manager.read_applications()
        self.second_window = tk.Toplevel(root)
        self.second_window.title("List Mahasiswa")
        self.second_window.geometry("300x200")
        self.second_window.iconbitmap('icon.ico')
        self.name_label = tk.Label(self.second_window)
        self.name_label.pack(side=tk.TOP)
        self.update_name_label()
        
        self.second_window.config(background="#373535")
        
        btn_update = tk.Button(self.root, text="Perbarui",  command=self.show_update_form,width=34)
        btn_update.pack(side=tk.TOP)

        btn_delete = tk.Button(self.root, text="Hapus",  command=self.show_delete_form,width=34)
        btn_delete.pack(side=tk.TOP)

        btn_search = tk.Button(self.root, text="Cari",  command=self.show_search_form,width=34)
        btn_search.pack(side=tk.TOP)

        option = [
            "Urutkan berdasarkan IPK",
            "Urutkan berdasarkan Nama",
            "Urutkan berdasarkan Umur",
            "Urutkan berdasarkan NPM",
        ]
        clicked = StringVar()
        clicked.set(option[0])
        
        frameku = Frame(self.root)
        frameku.pack(side=tk.TOP)
        
        drop = OptionMenu(frameku, clicked, *option)
        drop.pack(side=tk.LEFT)
        drop.config(width=20)
        
        btn_sort = tk.Button(frameku, text="Urutkan",  command=lambda : self.sort_applications(clicked.get()),width=10)
        btn_sort.pack(side=tk.LEFT)

        btn_back = tk.Button(self.root, text="Kembali",  command=self.show_main_menu,width=34)
        btn_back.pack(side=tk.TOP)

    def show_update_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_npm = tk.Label(self.root, text="NPM untuk Diperbarui")
        label_npm.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        label_new_name = tk.Label(self.root, text="Nama Baru (opsional)")
        label_new_name.pack(pady=5)
        self.entry_new_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_name.pack(pady=5)

        label_new_age = tk.Label(self.root, text="Umur Baru (opsional)")
        label_new_age.pack(pady=5)
        self.entry_new_age = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_age.pack(pady=5)

        label_new_ipk = tk.Label(self.root, text="IPK Baru (opsional)")
        label_new_ipk.pack(pady=5)
        self.entry_new_ipk = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_ipk.pack(pady=5)
        
        label_new_npm = tk.Label(self.root, text="NPM Baru (opsional)")
        label_new_npm.pack(pady=5)
        self.entry_new_npm = tk.Entry(self.root, width=self.entry_width)
        self.entry_new_npm.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_update)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_update(self):
        npm = int(self.entry_name.get())
        new_name = self.entry_new_name.get() or None
        new_age = int(self.entry_new_age.get()) if self.entry_new_age.get() else None
        new_ipk = float(self.entry_new_ipk.get()) if self.entry_new_ipk.get() else None
        new_npm = int(self.entry_new_npm.get()) if self.entry_new_npm.get() else None
        self.manager.update_application(npm, new_name, new_age, new_ipk, new_npm)
        self.show_applicant_list()

    def show_delete_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_npm = tk.Label(self.root, text="NPM untuk Dihapus")
        label_npm.pack(pady=5)
        self.entry_npm = tk.Entry(self.root, width=self.entry_width)
        self.entry_npm.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=self.submit_delete)
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_delete(self):
        npm = int(self.entry_npm.get())
        self.manager.delete_application(npm)
        self.show_applicant_list()

    def show_search_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        label_name = tk.Label(self.root, text="NPM untuk Dicari")
        label_name.pack(pady=5)
        self.entry_name = tk.Entry(self.root, width=self.entry_width)
        self.entry_name.pack(pady=5)

        btn_submit = tk.Button(self.root, text="Kirim", width=self.button_width, command=lambda : self.submit_search(int(self.entry_name.get())))
        btn_submit.pack(pady=20)

        btn_back = tk.Button(self.root, text="Kembali", width=self.button_width, command=self.show_applicant_list)
        btn_back.pack(pady=5)

    def submit_search(self, npm):
        self.manager.search_application(npm)
        self.show_applicant_list()

    def sort_applications(self, option):
        if option == "Urutkan berdasarkan IPK":
            self.manager.sort_applications_by_ipk()
        if option == "Urutkan berdasarkan Nama":
            self.manager.sort_applications_by_name()
        if option == "Urutkan berdasarkan Umur":
            self.manager.sort_applications_by_age()
        if option == "Urutkan berdasarkan NPM":
            self.manager.sort_applications_by_npm()
        self.show_applicant_list()


root = tk.Tk()
root.title("Data Beasiswa")
root.iconbitmap('icon.ico')
root.config(background="#373535")
root.columnconfigure(0, weight=1)
#root.rowconfigure(0, weight=1)
app = ScholarshipApp(root)

root.mainloop()
